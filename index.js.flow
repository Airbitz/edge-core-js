// @flow

import {
  type EdgeContext,
  type EdgeContextOptions,
  type EdgeFakeUser,
  type EdgeFakeWorld,
  type EdgeIo,
  type EdgeLoginMessages,
  type EdgeNativeIo
} from './src/types/types.js'

export * from './src/types/types.js'

declare export function addEdgeCorePlugins(): mixed
declare export function lockEdgeCorePlugins(): mixed
declare export function closeEdge(): mixed
declare export function makeFakeIo(): EdgeIo

/**
 * Initializes the Edge core library,
 * automatically selecting the appropriate platform.
 */
declare export function makeEdgeContext(
  opts: EdgeContextOptions
): Promise<EdgeContext>

declare export function makeFakeEdgeWorld(
  users?: Array<EdgeFakeUser>
): Promise<EdgeFakeWorld>

/**
 * React Native component for creating an EdgeContext.
 */
declare export function MakeEdgeContext(props: {
  debug?: boolean,
  nativeIo?: EdgeNativeIo,
  onError?: (e: any) => mixed,
  onLoad: (context: EdgeContext) => mixed,
  options: EdgeContextOptions
}): any // React element

/**
 * React Native component for creating an EdgeFakeWorld for testing.
 */
declare export function MakeFakeEdgeWorld(props: {
  debug?: boolean,
  nativeIo?: EdgeNativeIo,
  onError?: (e: any) => mixed,
  onLoad: (context: EdgeContext) => mixed,
  users: Array<EdgeFakeUser>
}): any // React element

/**
 * React Native function for getting login alerts without a context:
 */
declare export function fetchLoginMessages(apiKey: string): EdgeLoginMessages

// System-specific io exports:
declare export function makeBrowserIo(): EdgeIo
declare export function makeNodeIo(path: string): EdgeIo
